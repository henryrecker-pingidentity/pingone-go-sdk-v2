/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RiskPredictorCompositeAllOfCompositions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPredictorCompositeAllOfCompositions{}

// RiskPredictorCompositeAllOfCompositions struct for RiskPredictorCompositeAllOfCompositions
type RiskPredictorCompositeAllOfCompositions struct {
	Condition RiskPredictorCompositeConditionBase `json:"condition"`
	Level     EnumRiskLevel                       `json:"level"`
}

type _RiskPredictorCompositeAllOfCompositions RiskPredictorCompositeAllOfCompositions

// NewRiskPredictorCompositeAllOfCompositions instantiates a new RiskPredictorCompositeAllOfCompositions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPredictorCompositeAllOfCompositions(condition RiskPredictorCompositeConditionBase, level EnumRiskLevel) *RiskPredictorCompositeAllOfCompositions {
	this := RiskPredictorCompositeAllOfCompositions{}
	this.Condition = condition
	this.Level = level
	return &this
}

// NewRiskPredictorCompositeAllOfCompositionsWithDefaults instantiates a new RiskPredictorCompositeAllOfCompositions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPredictorCompositeAllOfCompositionsWithDefaults() *RiskPredictorCompositeAllOfCompositions {
	this := RiskPredictorCompositeAllOfCompositions{}
	return &this
}

// GetCondition returns the Condition field value
func (o *RiskPredictorCompositeAllOfCompositions) GetCondition() RiskPredictorCompositeConditionBase {
	if o == nil {
		var ret RiskPredictorCompositeConditionBase
		return ret
	}

	return o.Condition
}

// GetConditionOk returns a tuple with the Condition field value
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeAllOfCompositions) GetConditionOk() (*RiskPredictorCompositeConditionBase, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Condition, true
}

// SetCondition sets field value
func (o *RiskPredictorCompositeAllOfCompositions) SetCondition(v RiskPredictorCompositeConditionBase) {
	o.Condition = v
}

// GetLevel returns the Level field value
func (o *RiskPredictorCompositeAllOfCompositions) GetLevel() EnumRiskLevel {
	if o == nil {
		var ret EnumRiskLevel
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeAllOfCompositions) GetLevelOk() (*EnumRiskLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *RiskPredictorCompositeAllOfCompositions) SetLevel(v EnumRiskLevel) {
	o.Level = v
}

func (o RiskPredictorCompositeAllOfCompositions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPredictorCompositeAllOfCompositions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["condition"] = o.Condition
	toSerialize["level"] = o.Level
	return toSerialize, nil
}

func (o *RiskPredictorCompositeAllOfCompositions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"condition",
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRiskPredictorCompositeAllOfCompositions := _RiskPredictorCompositeAllOfCompositions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRiskPredictorCompositeAllOfCompositions)

	if err != nil {
		return err
	}

	*o = RiskPredictorCompositeAllOfCompositions(varRiskPredictorCompositeAllOfCompositions)

	return err
}

type NullableRiskPredictorCompositeAllOfCompositions struct {
	value *RiskPredictorCompositeAllOfCompositions
	isSet bool
}

func (v NullableRiskPredictorCompositeAllOfCompositions) Get() *RiskPredictorCompositeAllOfCompositions {
	return v.value
}

func (v *NullableRiskPredictorCompositeAllOfCompositions) Set(val *RiskPredictorCompositeAllOfCompositions) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorCompositeAllOfCompositions) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorCompositeAllOfCompositions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorCompositeAllOfCompositions(val *RiskPredictorCompositeAllOfCompositions) *NullableRiskPredictorCompositeAllOfCompositions {
	return &NullableRiskPredictorCompositeAllOfCompositions{value: val, isSet: true}
}

func (v NullableRiskPredictorCompositeAllOfCompositions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorCompositeAllOfCompositions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
