/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the RiskPredictorCommonDefaultResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPredictorCommonDefaultResult{}

// RiskPredictorCommonDefaultResult This specifies the result assigned to the predictor if the predictor could not be calculated during the risk evaluation. If this field is not provided, and the predictor could not be calculated during risk evaluation, the following options are: If the predictor is used in an override, the override is skipped. In the weighted policy, the predictor will have a weight of 0.
type RiskPredictorCommonDefaultResult struct {
	Level *EnumRiskLevel `json:"level,omitempty"`
	Type  EnumResultType `json:"type"`
}

type _RiskPredictorCommonDefaultResult RiskPredictorCommonDefaultResult

// NewRiskPredictorCommonDefaultResult instantiates a new RiskPredictorCommonDefaultResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPredictorCommonDefaultResult(type_ EnumResultType) *RiskPredictorCommonDefaultResult {
	this := RiskPredictorCommonDefaultResult{}
	this.Type = type_
	return &this
}

// NewRiskPredictorCommonDefaultResultWithDefaults instantiates a new RiskPredictorCommonDefaultResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPredictorCommonDefaultResultWithDefaults() *RiskPredictorCommonDefaultResult {
	this := RiskPredictorCommonDefaultResult{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *RiskPredictorCommonDefaultResult) GetLevel() EnumRiskLevel {
	if o == nil || IsNil(o.Level) {
		var ret EnumRiskLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCommonDefaultResult) GetLevelOk() (*EnumRiskLevel, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *RiskPredictorCommonDefaultResult) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given EnumRiskLevel and assigns it to the Level field.
func (o *RiskPredictorCommonDefaultResult) SetLevel(v EnumRiskLevel) {
	o.Level = &v
}

// GetType returns the Type field value
func (o *RiskPredictorCommonDefaultResult) GetType() EnumResultType {
	if o == nil {
		var ret EnumResultType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RiskPredictorCommonDefaultResult) GetTypeOk() (*EnumResultType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RiskPredictorCommonDefaultResult) SetType(v EnumResultType) {
	o.Type = v
}

func (o RiskPredictorCommonDefaultResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPredictorCommonDefaultResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RiskPredictorCommonDefaultResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRiskPredictorCommonDefaultResult := _RiskPredictorCommonDefaultResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRiskPredictorCommonDefaultResult)

	if err != nil {
		return err
	}

	*o = RiskPredictorCommonDefaultResult(varRiskPredictorCommonDefaultResult)

	return err
}

type NullableRiskPredictorCommonDefaultResult struct {
	value *RiskPredictorCommonDefaultResult
	isSet bool
}

func (v NullableRiskPredictorCommonDefaultResult) Get() *RiskPredictorCommonDefaultResult {
	return v.value
}

func (v *NullableRiskPredictorCommonDefaultResult) Set(val *RiskPredictorCommonDefaultResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorCommonDefaultResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorCommonDefaultResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorCommonDefaultResult(val *RiskPredictorCommonDefaultResult) *NullableRiskPredictorCommonDefaultResult {
	return &NullableRiskPredictorCommonDefaultResult{value: val, isSet: true}
}

func (v NullableRiskPredictorCommonDefaultResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorCommonDefaultResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
