/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserMFAEnabled type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserMFAEnabled{}

// UserMFAEnabled struct for UserMFAEnabled
type UserMFAEnabled struct {
	Links map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// Whether multi-factor authentication is enabled. This attribute is set to `false` by default when the user is created.
	MfaEnabled bool `json:"mfaEnabled"`
}

type _UserMFAEnabled UserMFAEnabled

// NewUserMFAEnabled instantiates a new UserMFAEnabled object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserMFAEnabled(mfaEnabled bool) *UserMFAEnabled {
	this := UserMFAEnabled{}
	this.MfaEnabled = mfaEnabled
	return &this
}

// NewUserMFAEnabledWithDefaults instantiates a new UserMFAEnabled object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserMFAEnabledWithDefaults() *UserMFAEnabled {
	this := UserMFAEnabled{}
	return &this
}

func (o UserMFAEnabled) hasHalLink(linkIndex string) bool {
	if l, ok := o.GetLinksOk(); ok && l != nil {
		links := l
		if v, ok := links[linkIndex]; ok {
			if h, ok := v.GetHrefOk(); ok && h != nil && *h != "" {
				return true
			}
		}
	}
	return false
}

func (o UserMFAEnabled) getHalLink(linkIndex string) LinksHATEOASValue {
	if l, ok := o.GetLinksOk(); ok && l != nil {
		links := l
		if v, ok := links[linkIndex]; ok {
			return v
		}
	}

	var ret LinksHATEOASValue
	return ret
}

func (o UserMFAEnabled) getHalLinkOk(linkIndex string) (*LinksHATEOASValue, bool) {
	if l, ok := o.GetLinksOk(); ok && l != nil {
		links := l
		if v, ok := links[linkIndex]; ok {
			return &v, true
		}
	}

	return nil, false
}

func (o UserMFAEnabled) IsPaginated() bool {
	return o.hasHalLink(PAGINATION_HAL_LINK_INDEX_NEXT) || o.hasHalLink(PAGINATION_HAL_LINK_INDEX_PREV)
}

func (o UserMFAEnabled) HasPaginationSelf() bool {
	return o.hasHalLink(PAGINATION_HAL_LINK_INDEX_SELF)
}

func (o UserMFAEnabled) GetPaginationSelfLink() LinksHATEOASValue {
	return o.getHalLink(PAGINATION_HAL_LINK_INDEX_SELF)
}

func (o UserMFAEnabled) GetPaginationSelfLinkOk() (*LinksHATEOASValue, bool) {
	return o.getHalLinkOk(PAGINATION_HAL_LINK_INDEX_SELF)
}

func (o UserMFAEnabled) HasPaginationNext() bool {
	return o.hasHalLink(PAGINATION_HAL_LINK_INDEX_NEXT)
}

func (o UserMFAEnabled) GetPaginationNextLink() LinksHATEOASValue {
	return o.getHalLink(PAGINATION_HAL_LINK_INDEX_NEXT)
}

func (o UserMFAEnabled) GetPaginationNextLinkOk() (*LinksHATEOASValue, bool) {
	return o.getHalLinkOk(PAGINATION_HAL_LINK_INDEX_NEXT)
}

func (o UserMFAEnabled) HasPaginationPrevious() bool {
	return o.hasHalLink(PAGINATION_HAL_LINK_INDEX_PREV)
}

func (o UserMFAEnabled) GetPaginationPreviousLink() LinksHATEOASValue {
	return o.getHalLink(PAGINATION_HAL_LINK_INDEX_PREV)
}

func (o UserMFAEnabled) GetPaginationPreviousLinkOk() (*LinksHATEOASValue, bool) {
	return o.getHalLinkOk(PAGINATION_HAL_LINK_INDEX_PREV)
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *UserMFAEnabled) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserMFAEnabled) GetLinksOk() (map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return map[string]LinksHATEOASValue{}, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *UserMFAEnabled) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *UserMFAEnabled) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = v
}

// GetMfaEnabled returns the MfaEnabled field value
func (o *UserMFAEnabled) GetMfaEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MfaEnabled
}

// GetMfaEnabledOk returns a tuple with the MfaEnabled field value
// and a boolean to check if the value has been set.
func (o *UserMFAEnabled) GetMfaEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfaEnabled, true
}

// SetMfaEnabled sets field value
func (o *UserMFAEnabled) SetMfaEnabled(v bool) {
	o.MfaEnabled = v
}

func (o UserMFAEnabled) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserMFAEnabled) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	toSerialize["mfaEnabled"] = o.MfaEnabled
	return toSerialize, nil
}

func (o *UserMFAEnabled) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mfaEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserMFAEnabled := _UserMFAEnabled{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserMFAEnabled)

	if err != nil {
		return err
	}

	*o = UserMFAEnabled(varUserMFAEnabled)

	return err
}

type NullableUserMFAEnabled struct {
	value *UserMFAEnabled
	isSet bool
}

func (v NullableUserMFAEnabled) Get() *UserMFAEnabled {
	return v.value
}

func (v *NullableUserMFAEnabled) Set(val *UserMFAEnabled) {
	v.value = val
	v.isSet = true
}

func (v NullableUserMFAEnabled) IsSet() bool {
	return v.isSet
}

func (v *NullableUserMFAEnabled) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserMFAEnabled(val *UserMFAEnabled) *NullableUserMFAEnabled {
	return &NullableUserMFAEnabled{value: val, isSet: true}
}

func (v NullableUserMFAEnabled) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserMFAEnabled) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


