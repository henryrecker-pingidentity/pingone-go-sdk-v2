/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// DeviceAuthenticationPolicyPostResponse - struct for DeviceAuthenticationPolicyPostResponse
type DeviceAuthenticationPolicyPostResponse struct {
	DeviceAuthenticationPolicy *DeviceAuthenticationPolicy
	ReadDeviceAuthenticationPolicies200Response *ReadDeviceAuthenticationPolicies200Response
}

// DeviceAuthenticationPolicyAsDeviceAuthenticationPolicyPostResponse is a convenience function that returns DeviceAuthenticationPolicy wrapped in DeviceAuthenticationPolicyPostResponse
func DeviceAuthenticationPolicyAsDeviceAuthenticationPolicyPostResponse(v *DeviceAuthenticationPolicy) DeviceAuthenticationPolicyPostResponse {
	return DeviceAuthenticationPolicyPostResponse{
		DeviceAuthenticationPolicy: v,
	}
}

// ReadDeviceAuthenticationPolicies200ResponseAsDeviceAuthenticationPolicyPostResponse is a convenience function that returns ReadDeviceAuthenticationPolicies200Response wrapped in DeviceAuthenticationPolicyPostResponse
func ReadDeviceAuthenticationPolicies200ResponseAsDeviceAuthenticationPolicyPostResponse(v *ReadDeviceAuthenticationPolicies200Response) DeviceAuthenticationPolicyPostResponse {
	return DeviceAuthenticationPolicyPostResponse{
		ReadDeviceAuthenticationPolicies200Response: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeviceAuthenticationPolicyPostResponse) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeviceAuthenticationPolicy
	err = json.Unmarshal(data, &dst.DeviceAuthenticationPolicy)
	if err == nil {
		if v, ok := dst.DeviceAuthenticationPolicy.GetNameOk(); ok && v != nil && *v != "" {
			match++
		} else {
			dst.DeviceAuthenticationPolicy = nil
		}
	} else {
		dst.DeviceAuthenticationPolicy = nil
	}

	// try to unmarshal data into ReadDeviceAuthenticationPolicies200Response
	err = json.Unmarshal(data, &dst.ReadDeviceAuthenticationPolicies200Response)
	if err == nil {
		if v, ok := dst.ReadDeviceAuthenticationPolicies200Response.GetEmbeddedOk(); ok && v != nil {
			match++
		} else {
			dst.ReadDeviceAuthenticationPolicies200Response = nil
		}
	} else {
		dst.ReadDeviceAuthenticationPolicies200Response = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeviceAuthenticationPolicy = nil
		dst.ReadDeviceAuthenticationPolicies200Response = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeviceAuthenticationPolicyPostResponse)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeviceAuthenticationPolicyPostResponse)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeviceAuthenticationPolicyPostResponse) MarshalJSON() ([]byte, error) {
	if src.DeviceAuthenticationPolicy != nil {
		return json.Marshal(&src.DeviceAuthenticationPolicy)
	}

	if src.ReadDeviceAuthenticationPolicies200Response != nil {
		return json.Marshal(&src.ReadDeviceAuthenticationPolicies200Response)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeviceAuthenticationPolicyPostResponse) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DeviceAuthenticationPolicy != nil {
		return obj.DeviceAuthenticationPolicy
	}

	if obj.ReadDeviceAuthenticationPolicies200Response != nil {
		return obj.ReadDeviceAuthenticationPolicies200Response
	}

	// all schemas are nil
	return nil
}

type NullableDeviceAuthenticationPolicyPostResponse struct {
	value *DeviceAuthenticationPolicyPostResponse
	isSet bool
}

func (v NullableDeviceAuthenticationPolicyPostResponse) Get() *DeviceAuthenticationPolicyPostResponse {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicyPostResponse) Set(val *DeviceAuthenticationPolicyPostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicyPostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicyPostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicyPostResponse(val *DeviceAuthenticationPolicyPostResponse) *NullableDeviceAuthenticationPolicyPostResponse {
	return &NullableDeviceAuthenticationPolicyPostResponse{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicyPostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicyPostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


