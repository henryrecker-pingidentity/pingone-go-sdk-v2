/*
PingOne Platform API - PingOne MFA

Testing ApplicationsApplicationMFAPushCredentialsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mfa

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/patrickcping/pingone-go-sdk-v2/mfa"
)

func Test_mfa_ApplicationsApplicationMFAPushCredentialsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationsApplicationMFAPushCredentialsApiService CreateMFAPushCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationID string

		resp, httpRes, err := apiClient.ApplicationsApplicationMFAPushCredentialsApi.CreateMFAPushCredential(context.Background(), environmentID, applicationID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsApplicationMFAPushCredentialsApiService DeleteMFAPushCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationID string
		var pushCredentialID string

		httpRes, err := apiClient.ApplicationsApplicationMFAPushCredentialsApi.DeleteMFAPushCredential(context.Background(), environmentID, applicationID, pushCredentialID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsApplicationMFAPushCredentialsApiService ReadAllMFAPushCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationID string

		pagedIterator := apiClient.ApplicationsApplicationMFAPushCredentialsApi.ReadAllMFAPushCredentials(context.Background(), environmentID, applicationID).Execute()

		for pageCursor, err := range pagedIterator {
			require.Nil(t, err)
			require.NotNil(t, pageCursor.Data)
			assert.Equal(t, 200, pageCursor.HTTPResponse.StatusCode)
		}

	})

	t.Run("Test ApplicationsApplicationMFAPushCredentialsApiService ReadOneMFAPushCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationID string
		var pushCredentialID string

		resp, httpRes, err := apiClient.ApplicationsApplicationMFAPushCredentialsApi.ReadOneMFAPushCredential(context.Background(), environmentID, applicationID, pushCredentialID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationsApplicationMFAPushCredentialsApiService UpdateMFAPushCredential", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationID string
		var pushCredentialID string

		resp, httpRes, err := apiClient.ApplicationsApplicationMFAPushCredentialsApi.UpdateMFAPushCredential(context.Background(), environmentID, applicationID, pushCredentialID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
