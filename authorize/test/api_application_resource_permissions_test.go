/*
PingOne Platform API - Authorize

Testing ApplicationResourcePermissionsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authorize

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/patrickcping/pingone-go-sdk-v2/authorize"
)

func Test_authorize_ApplicationResourcePermissionsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationResourcePermissionsApiService CreateApplicationPermission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationResourceID string

		resp, httpRes, err := apiClient.ApplicationResourcePermissionsApi.CreateApplicationPermission(context.Background(), environmentID, applicationResourceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationResourcePermissionsApiService DeleteApplicationPermission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationResourceID string
		var applicationResourcePermissionID string

		httpRes, err := apiClient.ApplicationResourcePermissionsApi.DeleteApplicationPermission(context.Background(), environmentID, applicationResourceID, applicationResourcePermissionID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationResourcePermissionsApiService ReadApplicationPermissions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationResourceID string

		resp, httpRes, err := apiClient.ApplicationResourcePermissionsApi.ReadApplicationPermissions(context.Background(), environmentID, applicationResourceID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationResourcePermissionsApiService ReadOneApplicationPermission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationResourceID string
		var applicationResourcePermissionID string

		resp, httpRes, err := apiClient.ApplicationResourcePermissionsApi.ReadOneApplicationPermission(context.Background(), environmentID, applicationResourceID, applicationResourcePermissionID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationResourcePermissionsApiService UpdateApplicationPermission", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationResourceID string
		var applicationResourcePermissionID string

		resp, httpRes, err := apiClient.ApplicationResourcePermissionsApi.UpdateApplicationPermission(context.Background(), environmentID, applicationResourceID, applicationResourcePermissionID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
