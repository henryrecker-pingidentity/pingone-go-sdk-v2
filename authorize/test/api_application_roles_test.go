/*
PingOne Platform API - Authorize

Testing ApplicationRolesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package authorize

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/patrickcping/pingone-go-sdk-v2/authorize"
)

func Test_authorize_ApplicationRolesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationRolesApiService CreateApplicationRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string

		resp, httpRes, err := apiClient.ApplicationRolesApi.CreateApplicationRoles(context.Background(), environmentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationRolesApiService DeleteApplicationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationRoleID string

		httpRes, err := apiClient.ApplicationRolesApi.DeleteApplicationRole(context.Background(), environmentID, applicationRoleID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationRolesApiService ReadApplicationRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string

		resp, httpRes, err := apiClient.ApplicationRolesApi.ReadApplicationRoles(context.Background(), environmentID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationRolesApiService ReadOneApplicationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationRoleID string

		resp, httpRes, err := apiClient.ApplicationRolesApi.ReadOneApplicationRole(context.Background(), environmentID, applicationRoleID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationRolesApiService UpdateApplicationRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var applicationRoleID string

		resp, httpRes, err := apiClient.ApplicationRolesApi.UpdateApplicationRole(context.Background(), environmentID, applicationRoleID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
