/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataPoliciesReferenceablePolicyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataPoliciesReferenceablePolicyDTO{}

// AuthorizeEditorDataPoliciesReferenceablePolicyDTO struct for AuthorizeEditorDataPoliciesReferenceablePolicyDTO
type AuthorizeEditorDataPoliciesReferenceablePolicyDTO struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	Condition *AuthorizeEditorDataConditionDTO `json:"condition,omitempty"`
	CombiningAlgorithm AuthorizeEditorDataPoliciesCombiningAlgorithmDTO `json:"combiningAlgorithm"`
	Children []map[string]interface{} `json:"children,omitempty"`
	RepetitionSettings *AuthorizeEditorDataPoliciesRepetitionSettingsDTO `json:"repetitionSettings,omitempty"`
	ManagedEntity *AuthorizeEditorDataManagedEntityDTO `json:"managedEntity,omitempty"`
	Version string `json:"version"`
}

// NewAuthorizeEditorDataPoliciesReferenceablePolicyDTO instantiates a new AuthorizeEditorDataPoliciesReferenceablePolicyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataPoliciesReferenceablePolicyDTO(combiningAlgorithm AuthorizeEditorDataPoliciesCombiningAlgorithmDTO, version string) *AuthorizeEditorDataPoliciesReferenceablePolicyDTO {
	this := AuthorizeEditorDataPoliciesReferenceablePolicyDTO{}
	this.CombiningAlgorithm = combiningAlgorithm
	this.Version = version
	return &this
}

// NewAuthorizeEditorDataPoliciesReferenceablePolicyDTOWithDefaults instantiates a new AuthorizeEditorDataPoliciesReferenceablePolicyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataPoliciesReferenceablePolicyDTOWithDefaults() *AuthorizeEditorDataPoliciesReferenceablePolicyDTO {
	this := AuthorizeEditorDataPoliciesReferenceablePolicyDTO{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetCondition() AuthorizeEditorDataConditionDTO {
	if o == nil || IsNil(o.Condition) {
		var ret AuthorizeEditorDataConditionDTO
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetConditionOk() (*AuthorizeEditorDataConditionDTO, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given AuthorizeEditorDataConditionDTO and assigns it to the Condition field.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetCondition(v AuthorizeEditorDataConditionDTO) {
	o.Condition = &v
}

// GetCombiningAlgorithm returns the CombiningAlgorithm field value
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetCombiningAlgorithm() AuthorizeEditorDataPoliciesCombiningAlgorithmDTO {
	if o == nil {
		var ret AuthorizeEditorDataPoliciesCombiningAlgorithmDTO
		return ret
	}

	return o.CombiningAlgorithm
}

// GetCombiningAlgorithmOk returns a tuple with the CombiningAlgorithm field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetCombiningAlgorithmOk() (*AuthorizeEditorDataPoliciesCombiningAlgorithmDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CombiningAlgorithm, true
}

// SetCombiningAlgorithm sets field value
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetCombiningAlgorithm(v AuthorizeEditorDataPoliciesCombiningAlgorithmDTO) {
	o.CombiningAlgorithm = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetChildren() []map[string]interface{} {
	if o == nil || IsNil(o.Children) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetChildrenOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []map[string]interface{} and assigns it to the Children field.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetChildren(v []map[string]interface{}) {
	o.Children = v
}

// GetRepetitionSettings returns the RepetitionSettings field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetRepetitionSettings() AuthorizeEditorDataPoliciesRepetitionSettingsDTO {
	if o == nil || IsNil(o.RepetitionSettings) {
		var ret AuthorizeEditorDataPoliciesRepetitionSettingsDTO
		return ret
	}
	return *o.RepetitionSettings
}

// GetRepetitionSettingsOk returns a tuple with the RepetitionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetRepetitionSettingsOk() (*AuthorizeEditorDataPoliciesRepetitionSettingsDTO, bool) {
	if o == nil || IsNil(o.RepetitionSettings) {
		return nil, false
	}
	return o.RepetitionSettings, true
}

// HasRepetitionSettings returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) HasRepetitionSettings() bool {
	if o != nil && !IsNil(o.RepetitionSettings) {
		return true
	}

	return false
}

// SetRepetitionSettings gets a reference to the given AuthorizeEditorDataPoliciesRepetitionSettingsDTO and assigns it to the RepetitionSettings field.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetRepetitionSettings(v AuthorizeEditorDataPoliciesRepetitionSettingsDTO) {
	o.RepetitionSettings = &v
}

// GetManagedEntity returns the ManagedEntity field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetManagedEntity() AuthorizeEditorDataManagedEntityDTO {
	if o == nil || IsNil(o.ManagedEntity) {
		var ret AuthorizeEditorDataManagedEntityDTO
		return ret
	}
	return *o.ManagedEntity
}

// GetManagedEntityOk returns a tuple with the ManagedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetManagedEntityOk() (*AuthorizeEditorDataManagedEntityDTO, bool) {
	if o == nil || IsNil(o.ManagedEntity) {
		return nil, false
	}
	return o.ManagedEntity, true
}

// HasManagedEntity returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) HasManagedEntity() bool {
	if o != nil && !IsNil(o.ManagedEntity) {
		return true
	}

	return false
}

// SetManagedEntity gets a reference to the given AuthorizeEditorDataManagedEntityDTO and assigns it to the ManagedEntity field.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetManagedEntity(v AuthorizeEditorDataManagedEntityDTO) {
	o.ManagedEntity = &v
}

// GetVersion returns the Version field value
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) SetVersion(v string) {
	o.Version = v
}

func (o AuthorizeEditorDataPoliciesReferenceablePolicyDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataPoliciesReferenceablePolicyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	toSerialize["combiningAlgorithm"] = o.CombiningAlgorithm
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.RepetitionSettings) {
		toSerialize["repetitionSettings"] = o.RepetitionSettings
	}
	if !IsNil(o.ManagedEntity) {
		toSerialize["managedEntity"] = o.ManagedEntity
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO struct {
	value *AuthorizeEditorDataPoliciesReferenceablePolicyDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO) Get() *AuthorizeEditorDataPoliciesReferenceablePolicyDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO) Set(val *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO(val *AuthorizeEditorDataPoliciesReferenceablePolicyDTO) *NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO {
	return &NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataPoliciesReferenceablePolicyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


