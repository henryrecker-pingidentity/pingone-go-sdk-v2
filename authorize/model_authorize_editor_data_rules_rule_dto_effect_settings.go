/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataRulesRuleDTOEffectSettings - struct for AuthorizeEditorDataRulesRuleDTOEffectSettings
type AuthorizeEditorDataRulesRuleDTOEffectSettings struct {
	AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO *AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO
	AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO *AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO
	AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO *AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO
	AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO *AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO
}

// AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO: v,
	}
}

// AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO: v,
	}
}

// AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO: v,
	}
}

// AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataRulesRuleDTOEffectSettings) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO)
	if err == nil {
		jsonAuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO, _ := json.Marshal(dst.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO)
		if string(jsonAuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO = nil
	}

	// try to unmarshal data into AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO)
	if err == nil {
		jsonAuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO, _ := json.Marshal(dst.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO)
		if string(jsonAuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO = nil
	}

	// try to unmarshal data into AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO)
	if err == nil {
		jsonAuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO, _ := json.Marshal(dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO)
		if string(jsonAuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO = nil
	}

	// try to unmarshal data into AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO)
	if err == nil {
		jsonAuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO, _ := json.Marshal(dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO)
		if string(jsonAuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO = nil
		dst.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO = nil
		dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO = nil
		dst.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuthorizeEditorDataRulesRuleDTOEffectSettings)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuthorizeEditorDataRulesRuleDTOEffectSettings)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataRulesRuleDTOEffectSettings) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO)
	}

	if src.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO)
	}

	if src.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO)
	}

	if src.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataRulesRuleDTOEffectSettings) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO != nil {
		return obj.AuthorizeEditorDataRuleseffectSettingsConditionalDenyElsePermitDTO
	}

	if obj.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO != nil {
		return obj.AuthorizeEditorDataRuleseffectSettingsConditionalPermitElseDenyDTO
	}

	if obj.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO != nil {
		return obj.AuthorizeEditorDataRuleseffectSettingsUnconditionalDenyDTO
	}

	if obj.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO != nil {
		return obj.AuthorizeEditorDataRuleseffectSettingsUnconditionalPermitDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataRulesRuleDTOEffectSettings struct {
	value *AuthorizeEditorDataRulesRuleDTOEffectSettings
	isSet bool
}

func (v NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) Get() *AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return v.value
}

func (v *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) Set(val *AuthorizeEditorDataRulesRuleDTOEffectSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataRulesRuleDTOEffectSettings(val *AuthorizeEditorDataRulesRuleDTOEffectSettings) *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings {
	return &NullableAuthorizeEditorDataRulesRuleDTOEffectSettings{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


