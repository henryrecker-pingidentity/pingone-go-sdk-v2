/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataRulesRuleDTOEffectSettings - struct for AuthorizeEditorDataRulesRuleDTOEffectSettings
type AuthorizeEditorDataRulesRuleDTOEffectSettings struct {
	AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO *AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO
	AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO *AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO
	AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO *AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO
	AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO *AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO
}

// AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO: v,
	}
}

// AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO: v,
	}
}

// AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO: v,
	}
}

// AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO wrapped in AuthorizeEditorDataRulesRuleDTOEffectSettings
func AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTOAsAuthorizeEditorDataRulesRuleDTOEffectSettings(v *AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO) AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return AuthorizeEditorDataRulesRuleDTOEffectSettings{
		AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataRulesRuleDTOEffectSettings) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO)
	if err == nil {
		jsonAuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO, _ := json.Marshal(dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO)
		if string(jsonAuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO = nil
	}

	// try to unmarshal data into AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO)
	if err == nil {
		jsonAuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO, _ := json.Marshal(dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO)
		if string(jsonAuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO = nil
	}

	// try to unmarshal data into AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO)
	if err == nil {
		jsonAuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO, _ := json.Marshal(dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO)
		if string(jsonAuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO = nil
	}

	// try to unmarshal data into AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO
	err = newStrictDecoder(data).Decode(&dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO)
	if err == nil {
		jsonAuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO, _ := json.Marshal(dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO)
		if string(jsonAuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO) == "{}" { // empty struct
			dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO = nil
		} else {
			match++
		}
	} else {
		dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO = nil
		dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO = nil
		dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO = nil
		dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO = nil

		return fmt.Errorf("data matches more than one schema in oneOf(AuthorizeEditorDataRulesRuleDTOEffectSettings)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(AuthorizeEditorDataRulesRuleDTOEffectSettings)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataRulesRuleDTOEffectSettings) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO)
	}

	if src.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO)
	}

	if src.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO)
	}

	if src.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataRulesRuleDTOEffectSettings) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO
	}

	if obj.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO
	}

	if obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO
	}

	if obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataRulesRuleDTOEffectSettings struct {
	value *AuthorizeEditorDataRulesRuleDTOEffectSettings
	isSet bool
}

func (v NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) Get() *AuthorizeEditorDataRulesRuleDTOEffectSettings {
	return v.value
}

func (v *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) Set(val *AuthorizeEditorDataRulesRuleDTOEffectSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataRulesRuleDTOEffectSettings(val *AuthorizeEditorDataRulesRuleDTOEffectSettings) *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings {
	return &NullableAuthorizeEditorDataRulesRuleDTOEffectSettings{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataRulesRuleDTOEffectSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


