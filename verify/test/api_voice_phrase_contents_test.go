/*
PingOne Platform API - PingOne Verify

Testing VoicePhraseContentsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package verify

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/patrickcping/pingone-go-sdk-v2/verify"
)

func Test_verify_VoicePhraseContentsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VoicePhraseContentsApiService CreateVoicePhraseContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var voicePhraseID string

		resp, httpRes, err := apiClient.VoicePhraseContentsApi.CreateVoicePhraseContent(context.Background(), environmentID, voicePhraseID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicePhraseContentsApiService DeleteVoicePhraseContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var voicePhraseID string
		var voiceContentsID string

		httpRes, err := apiClient.VoicePhraseContentsApi.DeleteVoicePhraseContent(context.Background(), environmentID, voicePhraseID, voiceContentsID).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicePhraseContentsApiService ReadAllVoicePhraseContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var voicePhraseID string

		pagedIterator := apiClient.VoicePhraseContentsApi.ReadAllVoicePhraseContents(context.Background(), environmentID, voicePhraseID).Execute()

		for pageCursor, err := range pagedIterator {
			require.Nil(t, err)
			require.NotNil(t, pageCursor.Data)
			assert.Equal(t, 200, pageCursor.HTTPResponse.StatusCode)
		}

	})

	t.Run("Test VoicePhraseContentsApiService ReadOneVoicePhraseContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var voicePhraseID string
		var voiceContentsID string

		resp, httpRes, err := apiClient.VoicePhraseContentsApi.ReadOneVoicePhraseContent(context.Background(), environmentID, voicePhraseID, voiceContentsID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VoicePhraseContentsApiService UpdateVoicePhraseContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var environmentID string
		var voicePhraseID string
		var voiceContentsID string

		resp, httpRes, err := apiClient.VoicePhraseContentsApi.UpdateVoicePhraseContent(context.Background(), environmentID, voicePhraseID, voiceContentsID).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
